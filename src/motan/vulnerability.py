#!/usr/bin/env python3

import json
import math
import os
from dataclasses import field
from typing import Type, ClassVar, Optional, List

import marshmallow.validate
from marshmallow import Schema
from marshmallow_dataclass import dataclass


@dataclass
class VulnerabilityReference(object):
    Schema: ClassVar[Type[Schema]] = Schema

    text: str
    links: dict

    class Meta:
        ordered = True


@dataclass
class VulnerableCode(object):
    Schema: ClassVar[Type[Schema]] = Schema

    what: str
    where: str
    full_path: Optional[str]

    def __init__(self, what: str, where: str, full_path: str = None):
        self.what = what
        self.where = where
        self.full_path = full_path

    class Meta:
        ordered = True


@dataclass
class CVSS(object):
    Schema: ClassVar[Type[Schema]] = Schema

    attack_vector: str = field(
        metadata={
            "validate": marshmallow.validate.OneOf(
                ["Network", "Adjacent", "Local", "Physical"]
            )
        }
    )
    attack_complexity: str = field(
        metadata={"validate": marshmallow.validate.OneOf(["Low", "High"])}
    )
    privileges_required: str = field(
        metadata={"validate": marshmallow.validate.OneOf(["None", "Low", "High"])}
    )
    user_interaction: str = field(
        metadata={"validate": marshmallow.validate.OneOf(["None", "Required"])}
    )
    scope: str = field(
        metadata={"validate": marshmallow.validate.OneOf(["Unchanged", "Changed"])}
    )
    confidentiality_impact: str = field(
        metadata={"validate": marshmallow.validate.OneOf(["High", "Low", "None"])}
    )
    integrity_impact: str = field(
        metadata={"validate": marshmallow.validate.OneOf(["High", "Low", "None"])}
    )
    availability_impact: str = field(
        metadata={"validate": marshmallow.validate.OneOf(["High", "Low", "None"])}
    )

    @staticmethod
    def round_up(number: float) -> float:
        int_input = int(number * 100000)
        if (int_input % 10000) == 0:
            return int_input / 100000.0
        else:
            return (math.floor(int_input / 10000) + 1) / 10.0

    @property
    def _iss(self) -> float:
        if self.confidentiality_impact == "High":
            confidentiality_val = 0.56
        elif self.confidentiality_impact == "Low":
            confidentiality_val = 0.22
        else:
            confidentiality_val = 0.0

        if self.integrity_impact == "High":
            integrity_val = 0.56
        elif self.integrity_impact == "Low":
            integrity_val = 0.22
        else:
            integrity_val = 0.0

        if self.availability_impact == "High":
            availability_val = 0.56
        elif self.availability_impact == "Low":
            availability_val = 0.22
        else:
            availability_val = 0.0

        return 1.0 - (
            (1.0 - confidentiality_val)
            * (1.0 - integrity_val)
            * (1.0 - availability_val)
        )

    @property
    def _impact(self) -> float:
        if self.scope == "Unchanged":
            return 6.42 * self._iss
        else:
            return 7.52 * (self._iss - 0.029) - 3.25 * (self._iss - 0.02) ** 15

    @property
    def _exploitability(self) -> float:
        if self.attack_vector == "Network":
            attack_vector_val = 0.85
        elif self.attack_vector == "Adjacent":
            attack_vector_val = 0.62
        elif self.attack_vector == "Local":
            attack_vector_val = 0.55
        else:
            attack_vector_val = 0.2

        if self.attack_complexity == "Low":
            attack_complexity_val = 0.77
        else:
            attack_complexity_val = 0.44

        if self.privileges_required == "None":
            privileges_required_val = 0.85
        elif self.privileges_required == "Low":
            if self.scope == "Unchanged":
                privileges_required_val = 0.62
            else:
                privileges_required_val = 0.68
        else:
            if self.scope == "Unchanged":
                privileges_required_val = 0.27
            else:
                privileges_required_val = 0.5

        if self.user_interaction == "None":
            user_interaction_val = 0.85
        else:
            user_interaction_val = 0.62

        return (
            8.22
            * attack_vector_val
            * attack_complexity_val
            * privileges_required_val
            * user_interaction_val
        )

    @property
    def base_score(self) -> float:
        if self._impact <= 0:
            return 0
        if self.scope == "Unchanged":
            return self.round_up(min(self._impact + self._exploitability, 10.0))
        else:
            return self.round_up(
                min(1.08 * (self._impact + self._exploitability), 10.0)
            )

    class Meta:
        ordered = True


@dataclass
class VulnerabilityDetails(object):
    Schema: ClassVar[Type[Schema]] = Schema

    # This is set after the JSON is loaded.
    id: Optional[str]
    name: str
    description: str
    remediation: Optional[str]
    references: Optional[VulnerabilityReference]
    owasp: List[str]
    cvss: CVSS
    api: Optional[str] = ""
    code: List[VulnerableCode] = field(default_factory=list)

    class Meta:
        ordered = True


def get_vulnerability_details(
    vulnerability_dir_path: str, language: str = "en"
) -> VulnerabilityDetails:
    # Always fallback to English language.
    if not language:
        language = "en"
    details_path = os.path.join(vulnerability_dir_path, f"details_{language}.json")
    if not os.path.isfile(details_path):
        details_path = os.path.join(vulnerability_dir_path, "details_en.json")

    risk_path = os.path.join(vulnerability_dir_path, "risk.json")

    with open(details_path, "r", encoding="utf-8") as details_file, open(
        risk_path, "r", encoding="utf-8"
    ) as risk_file:
        details_dict = json.load(details_file)
        risk_dict = json.load(risk_file)
        # Update details with risk items.
        details_dict.update(risk_dict)
        return VulnerabilityDetails.Schema().load(details_dict)
