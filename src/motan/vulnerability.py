#!/usr/bin/env python3

import json
import os
from dataclasses import field
from typing import Type, ClassVar, Optional, List

import marshmallow.validate
from marshmallow import Schema
from marshmallow_dataclass import dataclass


@dataclass
class VulnerabilityReference(object):
    Schema: ClassVar[Type[Schema]] = Schema

    text: str
    links: dict

    class Meta:
        ordered = True


@dataclass
class VulnerableCode(object):
    Schema: ClassVar[Type[Schema]] = Schema

    what: str
    where: str

    def __init__(self, what: str, where: str):
        self.what = what
        self.where = where

    class Meta:
        ordered = True


@dataclass
class CVSS(object):
    Schema: ClassVar[Type[Schema]] = Schema

    attack_vector: str = field(
        metadata={
            "validate": marshmallow.validate.OneOf(
                ["Network", "Adjacent", "Local", "Physical"]
            )
        }
    )
    attack_complexity: str = field(
        metadata={"validate": marshmallow.validate.OneOf(["Low", "High"])}
    )
    privileges_required: str = field(
        metadata={"validate": marshmallow.validate.OneOf(["None", "Low", "High"])}
    )
    user_interaction: str = field(
        metadata={"validate": marshmallow.validate.OneOf(["None", "Required"])}
    )
    scope: str = field(
        metadata={"validate": marshmallow.validate.OneOf(["Unchanged", "Changed"])}
    )
    confidentiality_impact: str = field(
        metadata={"validate": marshmallow.validate.OneOf(["High", "Low", "None"])}
    )
    integrity_impact: str = field(
        metadata={"validate": marshmallow.validate.OneOf(["High", "Low", "None"])}
    )
    availability_impact: str = field(
        metadata={"validate": marshmallow.validate.OneOf(["High", "Low", "None"])}
    )

    class Meta:
        ordered = True


@dataclass
class VulnerabilityDetails(object):
    Schema: ClassVar[Type[Schema]] = Schema

    # This is set after the JSON is loaded.
    id: Optional[str]
    name: str
    description: str
    remediation: Optional[str]
    references: Optional[VulnerabilityReference]
    owasp: List[str]
    cvss: CVSS
    code: List[VulnerableCode] = field(default_factory=list)

    class Meta:
        ordered = True


def get_vulnerability_details(
    vulnerability_dir_path: str, language: str = "en"
) -> VulnerabilityDetails:
    # Always fallback to English language.
    if not language:
        language = "en"
    details_path = os.path.join(vulnerability_dir_path, f"details_{language}.json")
    if not os.path.isfile(details_path):
        details_path = os.path.join(vulnerability_dir_path, "details_en.json")

    risk_path = os.path.join(vulnerability_dir_path, "risk.json")

    with open(details_path, "r", encoding="utf-8") as details_file, open(
        risk_path, "r", encoding="utf-8"
    ) as risk_file:
        details_dict = json.load(details_file)
        risk_dict = json.load(risk_file)
        # Update details with risk items.
        details_dict.update(risk_dict)
        return VulnerabilityDetails.Schema().load(details_dict)
